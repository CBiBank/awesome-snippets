{
  "Node.vanilla.middleware": {
    "prefix": "node-vanilla-middleware",
    "body": [
      "console.log(`There is no middleware in vanilla node.js`)",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.middleware."
  },
  "Node.vanilla.session": {
    "prefix": "node-vanilla-session",
    "body": [
      "const http = require('http')",
      "const crypto = require('crypto')",
      "",
      "// 存储会话的对象（实际应用中应使用数据库或缓存，如 Redis）",
      "const sessions = {}",
      "",
      "const parseCookies = (cookieHeader) => {",
      "\tconst cookies = {}",
      "\tif (!cookieHeader) return cookies",
      "\tcookieHeader.split(';').forEach(cookie => {",
      "\t\tconst [name, ...rest] = cookie.split('=')",
      "\t\tcookies[name.trim()] = decodeURIComponent(rest.join('='))",
      "\t})",
      "\treturn cookies",
      "}",
      "",
      "const generateSessionId = () => {",
      "\treturn crypto.randomBytes(16).toString('hex')",
      "}",
      "",
      "const server = http.createServer((req, res) => {",
      "\tconst cookies = parseCookies(req.headers.cookie)",
      "\tlet sessionId = cookies.sessionId",
      "",
      "\tif (!sessionId || !sessions[sessionId]) {",
      "\t\tsessionId = generateSessionId()",
      "\t\tsessions[sessionId] = { username: 'Guest' }",
      "\t\tres.setHeader('Set-Cookie', `sessionId=\\${sessionId}; HttpOnly; Path=/`)",
      "\t}",
      "",
      "\tconst session = sessions[sessionId]",
      "\tif (req.url === '/login') {",
      "\t\tsession.username = 'JohnDoe'",
      "\t\tres.writeHead(200, { 'Content-Type': 'text/plain' })",
      "\t\tres.end('You are now logged in')",
      "\t} else if (req.url === '/logout') {",
      "\t\tdelete sessions[sessionId]",
      "\t\tres.writeHead(200, { 'Content-Type': 'text/plain' })",
      "\t\tres.end('You are now logged out')",
      "\t} else {",
      "\t\tres.writeHead(200, { 'Content-Type': 'text/plain' })",
      "\t\tres.end(`Hello, \\${session.username}`)",
      "\t}",
      "})",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.session."
  },
  "Node.vanilla.cookie": {
    "prefix": "node-vanilla-cookie",
    "body": [
      "const parseCookies = (cookieHeader) => {",
      "\tconst cookies = {}",
      "\tif (!cookieHeader) return cookies",
      "\tcookieHeader.split(';').forEach(cookie => {",
      "\t\tconst [name, ...rest] = cookie.split('=')",
      "\t\tcookies[name.trim()] = decodeURIComponent(rest.join('='))",
      "\t})",
      "\treturn cookies",
      "}",
      "",
      "const server = http.createServer((req, res) => {",
      "\tconst cookies = parseCookies(req.headers.cookie)",
      "\tif (!cookies.username) {",
      "\t\tres.setHeader('Set-Cookie', 'username=JohnDoe; HttpOnly; Path=/; Max-Age=3600');",
      "\t\tres.writeHead(200, { 'Content-Type': 'text/plain' })",
      "\t\tres.end('Cookie has been set for the first time')",
      "\t} else {",
      "\t\tres.writeHead(200, { 'Content-Type': 'text/plain' })",
      "\t\tres.end(`Welcome back, \\${cookies.username}`)",
      "\t}",
      "})",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.cookie."
  },
  "Node.vanilla.body.formData": {
    "prefix": "node-vanilla-body-formData",
    "body": [
      "const http = require('http')",
      "const multiparty = require('multiparty')",
      "",
      "const server = http.createServer((req, res) => {",
      "\tlet body = ''",
      "\treq.on('data', chunk => {",
      "\t\tbody += chunk",
      "\t})",
      "\treq.on('end', () => {",
      "\t\tconst contentType = req.headers['content-type']",
      "\t\tif (contentType.startsWith('multipart/form-data')) {",
      "\t\t\tconst form = new multiparty.Form()",
      "\t\t\tform.parse(req, (err, fields, files) => {",
      "\t\t\t\tif (err) {",
      "\t\t\t\t\tres.statusCode = 400",
      "\t\t\t\t\tres.end('Error parsing multipart data')",
      "\t\t\t\t\treturn",
      "\t\t\t\t}",
      "\t\t\t\tres.end('Received multipart data')",
      "\t\t\t})",
      "\t\t} else {",
      "\t\t\tres.statusCode = 400",
      "\t\t\tres.end('Unsupported Content-Type')",
      "\t\t}",
      "\t})",
      "})",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.body.formData."
  },
  "Node.vanilla.body": {
    "prefix": "node-vanilla-body",
    "body": [
      "const http = require('http')",
      "const querystring = require('querystring')",
      "",
      "const server = http.createServer((req, res) => {",
      "\tlet body = ''",
      "\treq.on('data', chunk => {",
      "\t\tbody += chunk",
      "\t})",
      "\treq.on('end', () => {",
      "\t\tconst contentType = req.headers['content-type']",
      "",
      "\t\tif (contentType.startsWith('application/json')) {",
      "\t\t\ttry {",
      "\t\t\t\tconst parsedBody = JSON.parse(body)",
      "\t\t\t\tres.end('Received JSON data')",
      "\t\t\t} catch (e) {",
      "\t\t\t\tres.statusCode = 400",
      "\t\t\t\tres.end('Invalid JSON')",
      "\t\t\t}",
      "\t\t} else if (contentType.startsWith('application/x-www-form-urlencoded')) {",
      "\t\t\tconst parsedBody = querystring.parse(body)",
      "\t\t\tres.end('Received URL-encoded data')",
      "\t\t} else {",
      "\t\t\tres.statusCode = 400",
      "\t\t\tres.end('Unsupported Content-Type')",
      "\t\t}",
      "\t})",
      "})",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.body."
  },
  "Node.vanilla.views": {
    "prefix": "node-vanilla-views",
    "body": [
      "const renderTemplate = (filePath, data, callback) => {",
      "\tfs.readFile(filePath, 'utf-8', (err, content) => {",
      "\t\tif (err) {",
      "\t\t\tcallback(err, null)",
      "\t\t} else {",
      "\t\t\tconst rendered = ejs.render(content, data)",
      "\t\t\tcallback(null, rendered)",
      "\t\t}",
      "\t})",
      "}",
      "",
      "const server = http.createServer((req, res) => {",
      "\tconst templatePath = path.join(__dirname, 'views', 'index.ejs')",
      "\tconst data = { title: 'EJS Example', message: 'Hello, EJS!' }",
      "",
      "\trenderTemplate(templatePath, data, (err, html) => {",
      "\t\tif (err) {",
      "\t\t\tres.writeHead(500, { 'Content-Type': 'text/plain' })",
      "\t\t\tres.end('Error rendering template')",
      "\t\t} else {",
      "\t\t\tres.writeHead(200, { 'Content-Type': 'text/html' })",
      "\t\t\tres.end(html)",
      "\t\t}",
      "\t})",
      "})",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.views."
  },
  "Node.vanilla.static": {
    "prefix": "node-vanilla-static",
    "body": [
      "const server = http.createServer((req, res) => {",
      "\tlet filePath = path.join(__dirname, 'public', req.url === '/' ? 'index.html' : req.url)",
      "",
      "\tfs.readFile(filePath, (err, content) => {",
      "\t\tif (err) {",
      "\t\t\tres.writeHead(404, { 'Content-Type': 'text/plain' })",
      "\t\t\tres.end('404 Not Found')",
      "\t\t} else {",
      "\t\t\tres.writeHead(200)",
      "\t\t\tres.end(content)",
      "\t\t}",
      "\t})",
      "})",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.static."
  },
  "Node.vanilla.router": {
    "prefix": "node-vanilla-router",
    "body": [
      "const server = http.createServer((req, res) => {",
      "\tconst url = req.url",
      "\tres.setHeader('Content-Type', 'text/plain')",
      "",
      "\tif (url === '/') {",
      "\t\tres.statusCode = 200",
      "\t\tres.end('This is the home page.\\n')",
      "\t} else if (url === '/about') {",
      "\t\tres.statusCode = 200",
      "\t\tres.end('This is the about page.\\n')",
      "\t} else {",
      "\t\tres.statusCode = 404",
      "\t\tres.end('Page not found.\\n')",
      "\t}",
      "})",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.router."
  },
  "Node.vanilla.cors": {
    "prefix": "node-vanilla-cors",
    "body": [
      "const http = require('http')",
      "",
      "const server = http.createServer((req, res) => {",
      "\t// 设置 CORS 响应头",
      "\tres.setHeader('Access-Control-Allow-Origin', '*')",
      "\tres.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')",
      "\tres.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization')",
      "",
      "\t// 处理预检请求（OPTIONS 请求）",
      "\tif (req.method === 'OPTIONS') {",
      "\t\tres.writeHead(204) // No Content",
      "\t\tres.end()",
      "\t\treturn",
      "\t}",
      "",
      "\tif (req.method === 'GET') {",
      "\t\tres.writeHead(200, { 'Content-Type': 'text/plain' })",
      "\t\tres.end('Hello, world')",
      "\t} else {",
      "\t\tres.writeHead(405, { 'Content-Type': 'text/plain' }) // Method Not Allowed",
      "\t\tres.end('Method Not Allowed')",
      "\t}",
      "})",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.cors."
  },
  "Node.vanilla.download": {
    "prefix": "node-vanilla-download",
    "body": [
      "const http = require('http')",
      "const fs = require('fs')",
      "const path = require('path')",
      "",
      "const server = http.createServer((req, res) => {",
      "\tif (req.method === 'GET' && req.url.startsWith('/download')) {",
      "\t\t// 从请求中提取文件名（假设文件名是从 URL 参数中获取的）",
      "\t\tconst fileName = req.url.split('/download/')[1]",
      "\t\tconst filePath = path.join(__dirname, 'files', fileName)",
      "",
      "\t\tfs.access(filePath, fs.constants.F_OK, (err) => {",
      "\t\t\tif (err) {",
      "\t\t\t\tres.writeHead(404, { 'Content-Type': 'text/plain' })",
      "\t\t\t\tres.end('File not found')",
      "\t\t\t\treturn",
      "\t\t\t}",
      "\t\t\tres.writeHead(200, {",
      "\t\t\t\t'Content-Type': 'application/octet-stream',",
      "\t\t\t\t'Content-Disposition': `attachment; filename=\"\\${fileName}\"`",
      "\t\t\t})",
      "",
      "\t\t\tconst fileStream = fs.createReadStream(filePath)",
      "\t\t\tfileStream.pipe(res)",
      "",
      "\t\t\tfileStream.on('error', (streamErr) => {",
      "\t\t\t\tres.writeHead(500, { 'Content-Type': 'text/plain' })",
      "\t\t\t\tres.end('Server error')",
      "\t\t\t\tconsole.error('File stream error:', streamErr)",
      "\t\t\t})",
      "\t\t})",
      "\t} else {",
      "\t\tres.writeHead(404, { 'Content-Type': 'text/plain' })",
      "\t\tres.end('Not Found')",
      "\t}",
      "})",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.download."
  },
  "Node.vanilla.upload": {
    "prefix": "node-vanilla-upload",
    "body": [
      "const http = require('http')",
      "const fs = require('fs')",
      "const path = require('path')",
      "",
      "const parseMultipartFormData = (req, boundary) => {",
      "\treturn new Promise((resolve, reject) => {",
      "\t\tlet data = ''",
      "\t\treq.on('data', chunk => {",
      "\t\t\tdata += chunk.toString()",
      "\t\t})",
      "\t\treq.on('end', () => {",
      "\t\t\tconst parts = data.split('--' + boundary).filter(part => part.trim() !== '--' && part.trim() !== '')",
      "\t\t\tconst fileData = {}",
      "\t\t\tparts.forEach(part => {",
      "\t\t\t\tconst [headers, body] = part.split('\\r\\n\\r\\n')",
      "\t\t\t\tif (headers.includes('filename')) {",
      "\t\t\t\t\tconst nameMatch = headers.match(/name=\"(.+?)\"/)",
      "\t\t\t\t\tconst filenameMatch = headers.match(/filename=\"(.+?)\"/)",
      "\t\t\t\t\tif (nameMatch && filenameMatch) {",
      "\t\t\t\t\t\tconst name = nameMatch[1]",
      "\t\t\t\t\t\tconst filename = filenameMatch[1]",
      "\t\t\t\t\t\tconst fileContent = body.split('\\r\\n')[0]",
      "\t\t\t\t\t\tfileData[name] = { filename, fileContent }",
      "\t\t\t\t\t}",
      "\t\t\t\t}",
      "\t\t\t})",
      "\t\t\tresolve(fileData)",
      "\t\t})",
      "\t\treq.on('error', err => {",
      "\t\t\treject(err)",
      "\t\t})",
      "\t})",
      "}",
      "",
      "const server = http.createServer(async (req, res) => {",
      "\tif (req.method === 'GET' && req.url === '/') {",
      "\t\tres.writeHead(200, { 'Content-Type': 'text/html' })",
      "\t\tres.end(fs.readFileSync(path.join(__dirname, 'index.html')))",
      "\t} else if (req.method === 'POST' && req.url === '/upload') {",
      "\t\tconst contentType = req.headers['content-type']",
      "\t\tconst boundary = contentType.split('=')[1]",
      "\t\ttry {",
      "\t\t\tconst fileData = await parseMultipartFormData(req, boundary)",
      "\t\t\tfor (let key in fileData) {",
      "\t\t\t\tconst { filename, fileContent } = fileData[key]",
      "\t\t\t\tconst savePath = path.join(__dirname, 'uploads', filename)",
      "\t\t\t\tfs.writeFileSync(savePath, fileContent, 'binary')",
      "\t\t\t}",
      "",
      "\t\t\tres.writeHead(200, { 'Content-Type': 'text/plain' })",
      "\t\t\tres.end('File uploaded successfully')",
      "\t\t} catch (error) {",
      "\t\t\tconsole.error('File upload error:', error)",
      "\t\t\tres.writeHead(500, { 'Content-Type': 'text/plain' })",
      "\t\t\tres.end('File upload failed')",
      "\t\t}",
      "\t} else {",
      "\t\tres.writeHead(404, { 'Content-Type': 'text/plain' })",
      "\t\tres.end('Not Found')",
      "\t}",
      "})",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.upload."
  },
  "Node.vanilla.error": {
    "prefix": "node-vanilla-error",
    "body": [
      "try {",
      "\tconsole.log('This is a message.')",
      "} catch (error) {",
      "\tconsole.error(error)",
      "}",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.error."
  },
  "Node.vanilla.logger": {
    "prefix": "node-vanilla-logger",
    "body": [
      "const logFilePath = path.join(__dirname, 'app.log')",
      "const logLevels = {",
      "\tinfo: 'INFO',",
      "\twarn: 'WARN',",
      "\terror: 'ERROR'",
      "}",
      "const log = (level, message) => {",
      "\tconst logMessage = `\\${new Date().toISOString()} [\\${logLevels[level]}] - \\${message}\\n`",
      "\tfs.appendFile(logFilePath, logMessage, (err) => {",
      "\t\tif (err) {",
      "\t\t\tconsole.error('Failed to write to log file', err)",
      "\t\t}",
      "\t})",
      "}",
      "const info = (message) => log('info', message)",
      "const warn = (message) => log('warn', message)",
      "const error = (message) => log('error', message)",
      ""
    ],
    "description": "Code Snippets For Node.vanilla.logger."
  },
  "Node.vanilla": {
    "prefix": "node-vanilla",
    "body": [
      "const http = require('http')",
      "",
      "const hostname = '127.0.0.1'",
      "const port = 3000",
      "",
      "const server = http.createServer((req, res) => {",
      "\tres.statusCode = 200 // 设置响应状态码",
      "\tres.setHeader('Content-Type', 'text/plain') // 设置响应头",
      "\tres.end('Hello, World!\\n') // 响应内容",
      "})",
      "",
      "server.listen(port, hostname, () => {",
      "\tconsole.log(`Server running at http://\\${hostname}:\\${port}/`)",
      "})",
      ""
    ],
    "description": "Code Snippets For Node.vanilla."
  }
}